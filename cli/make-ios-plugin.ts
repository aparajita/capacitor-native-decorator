#! /usr/bin/env node
// $1 (optional) - path to the plugin.js file

import { existsSync, readFileSync, writeFileSync } from 'fs'
import path from 'path'

const pluginMTemplate = `#import <Foundation/Foundation.h>
#import <Capacitor/Capacitor.h>

// Generated by @aparajita/capacitor-native-decorator/make-ios-plugin

CAP_PLUGIN(__plugin__, "__plugin__",
__methods__
)
`

const pluginEntryTemplate = '  CAP_PLUGIN_METHOD(__method__, __type__);'
const pluginNameRE = /class\s+(\w+)(?:\$\d+)?\s+extends\s+core.WebPlugin\s+\{/mu

/*
__decorate([
        native()
    ], BiometricAuthWeb$1.prototype, "checkBiometry", null)
 */
const decoraterRE =
  /__decorate\s*\(\s*\[\s*(?:capacitorNativeDecorator\.)?native\s*\((?:(?:capacitorNativeDecorator\.)?PluginReturnType\.(?<returnType>\w+))?\)\s*\],\s*(?<pluginName>\w+)(?:\$\d+)?(?:\.prototype)?,\s*"(?<methodName>.+?)",\s*null\)/gmu

const iosPath = path.join('ios', 'Plugin')
const pluginMPath = path.join(iosPath, 'Plugin.m')
const greenCheck = '\x1b[32m✔\x1b[0m'

function fail(message: string): never {
  console.error(`❌  ${message}`)
  process.exit(1)
}

function checkPath(): string | never {
  // Make sure the iOS plugin has been generated
  if (!existsSync(iosPath)) {
    fail('Couldn’t find the ios plugin — did you run `capacitor add ios`?')
  }

  let pluginPath = path.join('dist', 'plugin.js')

  if (process.argv[2]) {
    pluginPath = process.argv[2]
  }

  if (!existsSync(pluginPath)) {
    fail('Couldn’t find the web plugin, run build first')
  }

  return pluginPath
}

function capitalize(str: string): string {
  return `${str.at(0)?.toUpperCase()}${str.slice(1)}`
}

function cli(): void {
  const pluginPath = checkPath()

  try {
    const plugin = readFileSync(pluginPath, 'utf-8')
    const nameMatch = pluginNameRE.exec(plugin)

    if (!nameMatch) {
      fail(`The plugin name could not be found in ${pluginPath}`)
    }

    const pluginName = nameMatch[1]
    const nativeMethods = [...plugin.matchAll(decoraterRE)].reduce(
      (result, match) => {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const groups = match.groups!
        const returnType = groups.returnType ?? 'promise'
        const capReturnType = `CAPPluginReturn${capitalize(returnType)}`
        result.push(
          pluginEntryTemplate
            .replace('__method__', groups.methodName)
            .replace('__type__', capReturnType)
        )
        return result
      },
      []
    )

    const template = pluginMTemplate
      .replace(/__plugin__/gu, pluginName)
      .replace('__methods__', nativeMethods.join('\n'))

    writeFileSync(pluginMPath, template, { encoding: 'utf-8' })
    console.log(`${greenCheck} Created ${pluginMPath}`)
  } catch (e) {
    fail(e instanceof Error ? e.message : 'Unknown error occurred')
  }
}

cli()

export default cli
